#!/bin/bash

_visible_target_unique ()
{
  ! _is_visible_target "$1"
}

_target_unique ()
{
  ! _is_target "$1"
}

_target_unique_for ()
{
  ! _is_target_for "$1" "$2"
}

_is_visible_target ()
{
  local this_tgt="$1"
  echo "$_visible_targets" | grep -q -x "$this_tgt"
}

_is_target ()
{
  local this_tgt="$1"
  echo "$_targets" | grep -q -x "$this_tgt"
}

_is_target_for ()
{
  local this_tgt="$1"
  local this_plat="$2"
  eval "echo \"\$_${this_plat}_targets\"" | grep -q -x "$this_tgt"
}

_target_dir ()
{
	local this_tgt="$1"
  target_dir="$(echo "$_targets_plats_dirs" | grep --max-count=1 "${this_tgt}:" | sed -e 's/^.*://g')"
  echo "$target_dir"
}

_target_dir_for ()
{
  local this_tgt="$1"
  local this_platform="$2"
  [ "$this_platform" ] || this_platform="$_drb_platform_generic"
  target_dir="$(echo "$_targets_plats_dirs" | grep --max-count=1 "${this_tgt}:${this_platform}" | sed -e 's/^.*://g')"
  echo "$target_dir"
}

_real_target_for ()
{
  # expand alias name --> target name
  local this_tgt="$1"
  local this_platform="$2"
  [ "$this_platform" ] || this_platform="$_drb_platform_generic"

  _target_dir_for "$this_tgt" "$this_platform" > /dev/null
  if [ "$target_dir" ]; then
    real_path="$(realpath "$target_dir")"
    real_target="$(basename "$real_path")"
  else
    real_target="$this_tgt"
  fi
  echo "$real_target"
}

_real_target ()
{
  # expand alias name --> target name
  local this_tgt="$1"
  _target_dir "$this_tgt" > /dev/null
  if [ "$target_dir" ]; then
	  real_path="$(realpath "$target_dir")"
	  real_target="$(basename "$real_path")"
  else
	  real_target="$this_tgt"
  fi
  echo "$real_target"
}

_match_targets ()
{
  local str="$1"
  local tgts="$(echo "$_targets" | grep "$str")"
  tgts="$(echo "$tgts" | grep -v -x "$str")"
  echo "$tgts"
}

_match_visible_targets ()
{
  local str="$1"
  local tgts="$(echo "$_visible_targets" | grep "$str")"
  tgts="$(echo "$tgts" | grep -v -x "$str")"
  echo "$tgts"
}

_codename_unique ()
{
  local _cn="$1"
  echo "$_codenames" | grep -q -v -x "$_cn"
}

_lookup_depends ()
{
  local this_tgt="$1"
  target_depends="$(echo "$_targets_depends" | grep "${this_tgt}:" | sed -e 's/^.*://g')"
  echo "$target_depends"
}

_lookup_codename ()
{
  local this_tgt="$1"
  codename="$(echo "$_targets_codenames" | grep --max-count=1 "${this_tgt}:" | sed -e 's/^.*://g')"
  echo "$codename"
}

_lookup_platforms ()
{
  local this_tgt="$1"
# !
# echo "_targets_plats_codenames=$_targets_plats_codenames"
  platforms="$(echo "$_targets_plats_dirs" | grep -e "^${this_tgt}:.*" | cut -d':' -f2)"
# echo platforms="$(echo "$_targets_plats_codenames" | grep -e "^${this_tgt}:.*" | cut -d':' -f2)"
  echo "$platforms"
}

_lookup_codename_for ()
{
  local this_tgt="$1"
  local this_platform="$2"
  [ "$this_platform" ] || this_platform="$_drb_platform_generic"

# echo "_targets_plats_codenames=$_targets_plats_codenames"
  # echo "$_targets_plats_codenames" | grep --max-count=1 "${this_tgt}:${this_platform}" | sed -e 's/^.*://g'

  if [ "$this_platform" = "$_drb_platform_generic" ]; then
    codename="$(echo "$_targets_plats_codenames" | grep --max-count=1 "${this_tgt}:" | sed -e 's/^.*://g')"
  else
    codename="$(echo "$_targets_plats_codenames" | grep --max-count=1 "${this_tgt}:${this_platform}:" | sed -e 's/^.*://g')"
  fi


  echo "$codename"
}

_find_targets_recurse ()
{
  local tgt_dir="$1"
  unset tgt_platforms _hidden

  # push stack
  _old_tgt_dirs="$tgt_dir $_old_tgt_dirs"

  plats_file="${tgt_dir}/${_drb_new_plats_file}"
  if [ -f "$plats_file" ]; then
    found_platforms="$found_platforms
$(cat "$plats_file")"
  fi

  impl_file="${tgt_dir}/${_drb_impl_file}"
  if [ -f "$impl_file" ]; then
    plats_file="${tgt_dir}/${_drb_target_platforms_file}"
    if [ -f "$plats_file" ]; then
      tgt_platforms="$(cat "$plats_file")"
      found_platforms="$found_platforms
$tgt_platforms"
    fi

    tgt_deps_file="${tgt_dir}/${_drb_target_depends_file}"
    if [ -f "$tgt_deps_file" ]; then
      tgt_depends="$(cat "$tgt_deps_file")"
      for td in $tgt_depends; do
        _targets_depends="$_targets_depends
$tgt:$td"
      done
    fi

    tgt="$(basename "$tgt_dir")"
    _target_unique "$tgt" && _targets="$_targets
$tgt"

    vis_file="${tgt_dir}/${_drb_target_not_visible_file}"
    [ ! -f "$vis_file" ] && _visible_target_unique "$tgt" && _visible_targets="$_visible_targets
$tgt"

    _targets_dirs="${tgt}:${tgt_dir}
$_targets_dirs"

    if ! echo "$tgt_platforms" | grep -q -E "[^[[:space:]]]*"; then
      tgt_platforms="$_drb_platform_generic"
    fi

    for p in $tgt_platforms; do
      _target_unique_for "$tgt" "$p" && \
        eval "_${this_plat}_targets=\"\$_${this_plat}_targets
$tgt\""

#       eval "_${this_plat}_targets_dirs=\"${tgt}:${tgt_dir}
# \$_${this_plat}_targets_dirs\""

      _targets_plats_dirs="${tgt}:${p}:${tgt_dir}
$_targets_plats_dirs"
    done
  fi

  for tgt in $(ls $tgt_dir); do
    td="${tgt_dir}/${tgt}"
    [ -d "$td" ] || continue
    _find_targets_recurse "$td"
  done

  # pop stack
  set -- $_old_tgt_dirs
  [ "$1" ] && tgt_dir="$1" ; shift
  _old_tgt_dirs="$@"
}

_find_targets ()
{
  for tgt_dir in $_target_search_paths; do
    [ -d "$tgt_dir" ] && _find_targets_recurse "$tgt_dir"
  done
  [ "$found_platforms" ] && _register_platforms "$found_platforms"
}


_soft_expand_target ()
{
  str="$1"
  tgt="$(echo "$_targets" | grep -x "$str")"
  [ "$tgt" ] || tgt="$(echo "$_targets" | grep --max-count=1 "$str")"
  echo "$tgt"
}

_hard_expand_target ()
{
  str="$1"
  tgt="$(_soft_expand_target "$str")"
  if [ ! "$tgt" ]; then
  	echo "error: target \"str\" did not match any known targets."
  	exit 1
  fi
  echo "$tgt"
}

_run_cmd_codename ()
{
  if [ ! "$(eval "command -v ${cmd}_${codename}")" ]; then
    # echo "skipping: $cmd $tgt - not implemented."
    return 1
  fi

  eval "${cmd}_${codename}"
}

_soft_run_cmd ()
{
  [ "$1" ] || return 1
  if [ ! "$(eval "command -v \"$1\"")" ]; then
    # echo "skipping: $cmd $tgt - not implemented."
    return 1
  fi

  eval "$1"
}

_run_api_cmd ()
{
  if [ ! "$(eval "command -v \"${cmd}\"")" ]; then
    # echo "skipping: $cmd $tgt - not implemented."
    return 1
  fi

  eval "${cmd}_${codename}"
}

_copy_function() {
    declare -F $1 > /dev/null || return 1
    eval "$(echo "${2}()"; declare -f ${1} | tail -n +2)"
}

_load_tgt_depends ()
{
# set -x
  local this_tgt="$1"
  local d
  for d in $(_lookup_depends "$this_tgt"); do
    d="$(_soft_expand_target $d)"
# echo _load_target "$d"
    _load_target "$d"
  done
# set +x
}

_set_default_build_dirs ()
{
  # set default src build out dirs
  for path in src build out; do
    pdc_var="$(eval "echo \"\$${path}_dir${_a}_${codename}${_p}\"")"
    if [ ! "$pdc_var" ]; then
      eval "pdc_var=\"\${drb_${path}_root}/${tgt}${_p}\""
      eval "${path}_dir${_a}_${codename}${_p}=\"$pdc_var\""
    fi
    # if not a full path starting in '/', then:
    if [ "$pdc_var" = "${pdc_var#/}" ]; then
      eval "pdc_var=\"\${drb_${path}_root}/${tgt}${_p}/${pdc_var}\""
      eval "${path}${_a}_dir_${codename}${_p}=\"$pdc_var\""
    fi
  done
}

_run_staged_setup ()
{
# set -x
  for s in $_drb_pre_cmd_stages $_drb_on_cmd_stages $_drb_post_cmd_stages; do
    if [ "$s" = "$_drb_on_stage_generic" ]; then
      _soft_run_cmd "setup"
      [ "$_a" ] && _soft_run_cmd "setup${_a}"
    else
      _soft_run_cmd "${s}_setup"
      [ "$_a" ] && _soft_run_cmd "${s}_setup${_a}"
    fi
  done

# set +x
}

_load_vars_inner ()
{
  for path in src build out; do
    # if not a full path starting in '/', then:
    pdc_var="$(eval "echo \"\$${path}_dir${_a}_${codename}${_p}\"")"
    if [ "$pdc_var" = "${pdc_var#/}" ]; then
      eval "pdc_var=\"\${drb_${path}_root}/${tgt}${_p}/${pdc_var}\""
      eval "${path}${_a}_dir_${codename}${_p}=\"$pdc_var\""
    fi
  done

  for var in $_drb_api_vars $vars; do
    eval "${var}${_a}_${codename}${_p}=\"\$${var}${_a}\""
  done

  for func in $funcs $_drb_api_cmds_expanded; do
# echo _copy_function "${func}${_a}" "${func}${_a}_${codename}${_p}"
    _copy_function "${func}${_a}" "${func}${_a}_${codename}${_p}"
# echo $?
  done
}

_load_depends_filter_plats_generate_codename ()
{
  [ "$run_plats" ] || run_plats="$_platforms"

  _real_target "$tgt" > /dev/null
  tgt="$real_target"

  _load_tgt_depends "$tgt"
# echo two
  generated_codename="$(mktemp -u tgt_XXXXXX)"

echo
echo "load tgt=$tgt"

  local tp="$(_lookup_platforms "$tgt")"
# echo "tp=^$tp$"
  [ "$tp" ] || tp="$_drb_platform_generic"

# echo "tp=^$tp$"
  for mp in $run_plats $_drb_platform_generic; do
# echo "mp=$mp"
    echo "$mp" | grep -q -x -F "$tp" && plats="$plats $mp"
# echo echo "$mp" \| grep -q -x -F "$tp" \&\& plats="$plats $mp"
  done

echo "plats=$plats"
}

_load_target ()
{
  local tgt="$1"
  local run_plats="$2"
  local plats
  local generated_codename

  # part 1
  _load_depends_filter_plats_generate_codename;

  for p in $plats; do

    # part 2
    _real_target_for "$tgt" "$p" > /dev/null
    tgt="$real_target"

    _target_dir_for "$tgt" "$p" > /dev/null
    [ "$target_dir" ] || continue
    echo "$loaded_target_dirs" | grep -q -x "$target_dir" && continue

    local impl_file="${target_dir}/${_drb_impl_file}"
    if [ ! -e "$impl_file" ]; then
      echo "error: Missing file \"$impl_file\", required by target \"$tgt\""
      exit 1
    fi

    unset $vars $_drb_api_vars
    unset $funcs $_drb_api_cmds_expanded

    if [ "$p" != "$_drb_platform_generic" ]; then
      unset $(echo $vars $_drb_api_vars | sed -e "s/ \|$/_${p} /g")
      unset $(echo $funcs $_drb_api_cmds_expanded | sed -e "s/ \|$/_${p} /g")
    fi

    _drb_runtime_platform="$p" # this is for "api/drb_copy_vars_from"

    _load_config_for "$tgt" "$p"
    . "$impl_file"

    [ "$codename" ] || codename="$code_name"
    [ "$codename" ] || codename="$generated_codename" # same tgt codename for all platforms
    _codename_unique "$codename" && _codenames="$_codenames
$codename"

    _targets_plats_codenames="${tgt}:${p}:${codename}
$_targets_plats_codenames"

    if [ "$p" = "$_drb_platform_generic" ]; then
      unset p _p p_
      unset _a
      # var --> var_codename
      _set_default_build_dirs
echo one
      _run_staged_setup
      _load_vars_inner
    else
      unset _a
      _p="_${p}"
      p_="${p}_"
      # var --> var_codename_p
# set -x
      _set_default_build_dirs
# set +x
      _a="_${p}"
      _set_default_build_dirs
echo two
      _run_staged_setup
      unset _a
      _load_vars_inner
      # var_p --> var_p_codename_p
      _a="_${p}"
      _load_vars_inner
    fi

    loaded_target_dirs="$loaded_target_dirs
$target_dir"
  done

  _targets_codenames="${tgt}:${codename}
$_targets_codenames"

  loaded_targets="$loaded_targets
$tgt"
}

_load_targets ()
{
  tgts_to_load="$*"

  for tgt in $tgts_to_load; do
    _load_target "$tgt"
  done

  # for tgt in $dep_targets_to_load; do
  #   _load_target "$tgt"
  # done
}

_resolve_targets ()
{
  _find_targets;

	tgts_to_resolve="$*"
  [ "$tgts_to_resolve" ] || tgts_to_resolve="$drb_default_targets"

  for tgt in $tgts_to_resolve; do
    tgt="$(_soft_expand_target $tgt)"
  	[ "$tgt" ] && echo "$tgts_resolved" | grep -q -x "$tgt" || tgts_resolved="$tgts_resolved
$tgt"
  done

    # ! config not yet loaded, before setup. why?
  _load_targets "$tgts_resolved";
}




