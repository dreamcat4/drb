#!/bin/bash
__this_file="$(realpath -q "$0")"
__this_dir="$(dirname "$__this_file")"

# immutable globals
_drb_version="0.01 pre-alpha"
_drb_root="$(realpath "${__this_dir}/../..")"
_drb_include="${_drb_root}/usr/include/drb"
_drb_known_plats_file=".known.platforms"
_drb_new_plats_file=".platforms"
_drb_target_platforms_file="supported.platforms"
_drb_target_depends_file="target.depends"
_drb_target_not_visible_file="hidden"
_drb_platform_generic="drb_platform_generic"
_drb_impl_file="target.sh"
_drb_api_copy_vars="apt_depends
src_dir
build_dir
out_dir
vars
funcs"
_drb_api_vars="codename
$_drb_api_copy_vars"
_drb_pre_cmd_stages="pre"
_drb_on_stage_generic="drb_on_stage_generic"
_drb_on_cmd_stage="on"
_drb_on_cmd_stages="$_drb_on_stage_generic $_drb_on_cmd_stage"
_drb_post_cmd_stages="post"
_drb_cmd_stages="$_drb_pre_cmd_stages $_drb_on_cmd_stages $_drb_post_cmd_stages"
_drb_clean_stage="drb_clean_stage"
_drb_clean_complete_stage="drb_clean_complete_stage"
_drb_clean_stages="$_drb_pre_cmd_stages $_drb_on_cmd_stages $_drb_clean_stage $_drb_post_cmd_stages $_drb_clean_complete_stage"
_drb_distclean_stage="drb_distclean_stage"
_drb_distclean_complete_stage="drb_distclean_complete_stage"
_drb_distclean_stages="$_drb_pre_cmd_stages $_drb_on_cmd_stages $_drb_distclean_stage $_drb_post_cmd_stages $_drb_distclean_complete_stage"
_drb_common_cmds="fetch
sync
build
assemble
clean
distclean"
_drb_supported_cmds="targets
info
configure
select
depends
$_drb_common_cmds"
_drb_api_cmds="setup
$_drb_common_cmds"
_drb_api_cmds_expanded ()
{
  for cmd in $_drb_api_cmds; do
    printf " $cmd"
    for s in $_drb_pre_cmd_stages $_drb_on_cmd_stage $_drb_post_cmd_stages; do
      _drb_api_cmds_expanded="$_drb_api_cmds_expanded $cmd"
       printf " ${s}_${cmd}"
    done
  done
  printf "\n"
}
_drb_api_cmds_expanded="$(_drb_api_cmds_expanded)"

# Source include files
. "${_drb_include}/config"
. "${_drb_include}/resolve_targets"
. "${_drb_include}/builtins"
. "${_drb_include}/api_methods"
. "${_drb_include}/run_cmds"


_drb_cat_help ()
{
  cat <<- "EOF"

 drb:
      Dreamcats build tool. A simple shell-based framework.
      Visit: https://github.com/dreamcat4/drb for help guide.

 Usage:
      $ drb <cmds> [platforms] [--] [targets]

 Commands:
      targets    - List available build targets
      configure  - Make user copy of target config & open in editor
      info       - Show metadata info about specific targets
      select     - Set a build alias to point to a different target
      depends    - Check target depenancies

 Build Stages:
      fetch      - Download all source code needed to build the target
      sync       - Update the target source code to its latest version
      build      - Compile/make all build-time and intermediate files
      assemble   - Create the final build product and output files
      clean      - Remove build files
      distclean  - Remove build files and src files

 Platforms:
      The hardware platform(s) you wish to build targets for.
      Targets you build must be written to support those platform(s).
      e.g. 'c1', 'rpi', 'beaglebone', etc.

 Options:
      -x,--debug     - Print command trace of targets
      -X,--trace     - Print command trace of drb program
      -v,--version   - Print the current version of drb and exit.
      -h,--help      - Display this message and exit.

EOF

  printf " Version:\n"
  printf "      $_drb_version\n"
  echo
}


_drb_parse_args ()
{
  _parse_cmds=true

  if [ "$#" -lt "1" ]; then
    _drb_cat_help;
    exit 1;
  fi

  # for arg in "$@"; do
  while [ "$1" ]; do
    arg="$1"
    case "$arg" in

      -v|--version)
        echo "Dreamcat's Builder - version ${_drb_version}."
        exit 1
      ;;

      -h|--help)
        _drb_cat_help
        exit 1
      ;;

      -x|--debug)
        drb_debug=true
      ;;

      -X|--trace)
        set -x
      ;;

      --)
        unset _parse_cmds
        unset _parse_platforms
      ;;

      -p|--platforms)
        _parse_platforms=true
      ;;

      *)
        if [ "$_parse_cmds" ]; then
          if echo "$_drb_supported_cmds" | grep -q -x "$arg"; then
            _cmds="$_cmds $arg"
          else
            unset _parse_cmds
            _parse_platforms=true
          fi
        fi

        if [ "$_parse_platforms" ]; then
          if echo "$drb_known_platforms" | grep -q -x "$arg"; then
            _platforms="$_platforms $arg"
          else
            unset _parse_platforms
            # ! if no platforms, set as $drb_default_platforms
            # echo "$_platforms" | grep -v -e '^[[:space:]]*$'
            [ "$_platforms" ] || _platforms="$drb_default_platforms"
            _parse_targets=true
          fi
        fi

        if [ "$_parse_targets" ]; then
          echo "$arg" | grep ' ' && echo "error: spaces not allowed in target names. User '-' or '_' instead." && exit 1
          _tgts="$_tgts $arg"
        fi
      ;;
    esac
    shift
  done
}

_drb_main ()
{
  _drb_search_paths;
  _drb_load_platforms;
  _drb_load_global_config;
  _drb_ensure_default_config;
  _drb_parse_args "$@";
  _resolve_targets "$_tgts";
  _run_cmds "$_cmds";
}
_drb_main "$@"


