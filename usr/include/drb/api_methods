#!/bin/bash

drb_run ()
{
  # run "cmd" on "target"
  this_cmd="$1"
  shift
  these_targets="$*"

  for this_tgt in $these_targets; do
    _run_chain "$this_cmd" "$this_tgt"
  done
}

drb_copy_vars_from ()
{
  # check if "$1:platform"

  if [ "$#" -lt 1 ]; then
    echo "in: ${target_dir}/${_drb_impl_file}"
    echo "error: drb_copy_variables_from takes at least 1 arguments: \"target\""
    exit 1
  fi
  base_tgt="$1"
  _base_codename="$(_lookup_codename "$base_tgt")"
# echo "_base_codename=$_base_codename"
  shift
  if [ "$1" ]; then
    base_vars="$*"
  else
    base_vars="$_drb_api_vars $(eval "echo \"\$vars_${_base_codename}\"")"
  fi

  for v in $base_vars; do
    # [ "$v" = "codename" ] && echo "FFFFFFFFF" && continue
    [ "$v" = "codename" ] && continue
    # vars="$vars $v" # add to our 'vars' variable

# eval "echo \"$v=\$${v}_${_base_codename}\""
# echo eval "echo \"$v=\$${v}_${_base_codename}\""
# $v="$(eval "echo \"\$${v}_${_base_codename}\"")"

    eval "${v}_${_drb_runtime_platform}=\"$(echo \"\$${v}_${_base_codename}\")\""
# eval "echo \"${v}_${_drb_runtime_platform}=\$$v\""
  done
}

drb_copy_funcs_from ()
{
  if [ "$#" -lt 1 ]; then
    echo "in: ${target_dir}/${_drb_impl_file}"
    echo "error: drb_copy_functions_from takes at least 1 arguments: \"target\""
    exit 1
  fi
  base_tgt="$1"
  _base_codename="$(_lookup_codename "$base_tgt")"

  shift
# ! doesnt seem to work - needs checking
  if [ "$1" ]; then
# echo one base_funcs="$*"
    base_funcs="$*"
  else
# echo two base_funcs="$_drb_api_cmds $(eval "echo \"\$funcs_${_base_codename}\"")"
    base_funcs="$_drb_api_cmds $(eval "echo \"\$funcs_${_base_codename}\"")"
  fi

  for api_func in $base_funcs; do
# echo _copy_function "${api_func}_${_base_codename}" "$api_func"
    _copy_function "${api_func}_${_base_codename}" "$api_func"
# echo $?
# ! add it to funcs variable if missing AND not in default API funcs
    # echo "$funcs" | grep

  done
}

fetch ()
{
  _api_run_cmd "fetch" "$@"
}

sync ()
{
  _api_run_cmd "sync" "$@"
}

build ()
{
  _api_run_cmd "build" "$@"
}

assemble ()
{
  _api_run_cmd "assemble" "$@"
}



