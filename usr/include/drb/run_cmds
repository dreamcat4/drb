#!/bin/bash

_register_platforms ()
{
  new_platforms="$*"
  platforms_file="${drb_conf_root}/config/${_drb_known_plats_file}"
  existing_platforms="$(cat "$platforms_file")"

  echo $existing_platforms $new_platforms | \
    tr -s [:space:] \\n | sort | uniq > "$platforms_file"

  drb_known_platforms="$(cat "$platforms_file")"
}

_run_cmd_for ()
{
  _run_cmd "$@"
}

_ensure_plats_push_codename ()
{
  [ "$plats" ] || plats="$_platforms"
  echo "$plats" | grep -q "$_drb_platform_generic" || plats="$_drb_platform_generic $plats"

  # push stack
  [ "$codename" ] && _old_codenames="$codename $_old_codenames"
}

_set_unset_s ()
{
  case $s in
    $_drb_on_stage_generic|$_drb_clean_complete_stage|$_drb_distclean_complete_stage)
      unset s_
      ;;
    *)
      s_="${s}_"
      ;;
  esac
}

_set_unset_p ()
{
  if [ "$p" = "$_drb_platform_generic" ]; then
    unset _p p_
  else
    _p="_${p}"
    # p_="${p}_"
  fi
}

_set_unset_a_vars ()
{
  _real_target_for "$tgt" "$p" > /dev/null
  tgt="$real_target"

  _lookup_codename_for "$tgt" "$p" > /dev/null
  unset $vars $funcs $_drb_api_vars $_drb_api_cmds

  if [ "$a" = "$_drb_platform_generic" ]; then
    unset _a
  else
    _a="_${a}"
  fi

  retval=0
}

_reload_vars_inner ()
{
# set -x
  for var in $_drb_api_vars; do
    eval "${var}${_b}=\"\$${var}${_b}_${codename}${_p}\""
  done
# set +x

  for func in $_drb_api_cmds $funcs; do
    _copy_function "${func}${_b}_${codename}${_p}" "${func}${_b}"
  done
}

_set_b_load_vars ()
{
  unset b _b
  _reload_vars_inner
  if [ "$_p" ]; then
    _b="_${p}"
    _reload_vars_inner
  fi
}

_pop_codenames ()
{
  # pop 1 level
  set -- $_old_codenames
  if [ "$1" ]; then
    codename="$1"
    for path in src build out; do
      eval "${path}_dir=\"\$${path}_dir_${codename}${_p}\""
    done
  fi
  shift
  _old_codenames="$@"
}

_run_cmd ()
{
  local cmd="$1"
  local tgt="$2"
  local plats="$3"

  # part 1
  _ensure_plats_push_codename;

  # local s
  for s in $_drb_cmd_stages; do
    _set_unset_s

    local p
    for p in $plats; do
      _set_unset_p

      as="$_drb_platform_generic"
      [ "$p" != "$_drb_platform_generic" ] && as="$as $p"

      for a in $as; do
        local codename
        _set_unset_a_vars;

        # part 3
        if [ -e "${drb_builder_root}/.completed/${s_}${cmd}${_a}.${tgt}${_p}" ]; then
          # echo "skipping: ${s_}${cmd}${_a}.${tgt}${_p} - ${s_}${cmd}${_a}_${codename}${_p} - already completed."
          continue
        fi

        if [ ! "$(eval "command -v ${s_}${cmd}${_a}_${codename}${_p}")" ]; then
          # echo "skipping: ${s_}${cmd}${_a}.${tgt}${_p} - ${s_}${cmd}${_a}_${codename}${_p} - not implemented."
          touch "${drb_builder_root}/.completed/${s_}${cmd}${_a}.${tgt}${_p}"
          continue
        fi

        # part 4
        echo "loading vars for - ${s_}${cmd}${_a}_${codename}${_p}";
        _set_b_load_vars;

        # part 5
        case "$_cmd" in
          fetch|sync)
            this_dir="$src_dir"
            ;;
          build)
            this_dir="$build_dir"
            ;;
          assemble)
            this_dir="$out_dir"
            ;;
        esac

echo this_dir="$src_dir"
        mkdir -p "$this_dir" && cd "$this_dir" || return 1
echo "running - ${s_}${cmd}${_a}_${codename}${_p}";
        eval "${s_}${cmd}${_a}_${codename}${_p}";
echo "Done."
        retval="$?"

        if [ "$retval" -eq 0 ]; then
          touch "${drb_builder_root}/.completed/${s_}${cmd}${_a}.${tgt}${_p}"
          echo "command: $cmd${_a} $tgt - completed successfully."
        else
          echo "error: failed to $cmd target \"$tgt${_a}\"" && exit "$retval"
        fi
      done
    done
  done

  # part 6
  _pop_codenames;
}

_run_chain ()
{
  local last_cmd="$1"
  local tgt="$2"
  local __cmd
  tgt="$(_hard_expand_target "$tgt")"

  for __cmd in fetch sync build assemble; do
    _run_cmd "$__cmd" "$tgt" "$_platforms"
    [ "$__cmd" = "$last_cmd" ] && break
  done
}

_run_cmds ()
{
  local cmds_to_run="$*"
  local _cmd tgt

  if echo "$cmds_to_run" | grep -q "depends\|fetch\|sync\|build\|assemble"; then
    for tgt in $loaded_targets; do
      _check_apt_depends "$tgt"
    done
  fi

  if [ "$_apt_depends_error" ]; then
    echo "To install missing dependancies, run:"
    echo "  sudo apt-get install ${all_missing_pkgs# }"
    exit 1
  fi

  for _cmd in $cmds_to_run; do
    case "$_cmd" in
      targets)
        _list_targets "$_tgts"
        continue
      ;;
    esac
    for tgt in $_tgts; do
      tgt="$(_hard_expand_target "$tgt")"
      case "$_cmd" in
        select)
          _select_target "$tgt"
          continue
        ;;
        configure)
          _configure_target "$tgt" "$_platforms"
          continue
        ;;
        info)
          _target_info "$tgt"
          continue
        ;;
        clean)
          _clean_target "$tgt" "$_platforms"
          continue
        ;;
        distclean)
          _distclean_target "$tgt" "$_platforms"
          continue
        ;;
      esac
    done
  done

  for _cmd in $cmds_to_run; do
    [ "$_targets_updated" ] && echo "warning: Some commands not run. Please try again without \"drb select\" to finish remaining actions." && exit 1

    for tgt in $tgts_resolved; do
      case "$_cmd" in
        fetch|sync|build|assemble)
          _run_chain "$_cmd" "$tgt"
          continue
        ;;
      esac
    done
  done
}
