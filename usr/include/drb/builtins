#!/bin/bash

_in_select ()
{
  [ "$new_tgt" = "CANCEL" ] && break
  if [ "$_delete" ] && [ "$new_tgt" = "$_delete" ]; then
    _target_dir "$tgt_alias" > /dev/null
    rm "$target_dir"
    break
  fi

  for target_search_path in $(echo $_target_search_paths|tr ' ' '\n'|tac|tr '\n' ' '); do
    _target_dir "$new_tgt" > /dev/null
    ln -sf "$target_dir" "${target_search_path}/${tgt_alias}"
    _targets_updated=true
    echo "Target \"$tgt_alias\" updated."
    echo ""
    break
  done
}

_select_target ()
{
  tgt_alias="$*"
  if echo "$_targets" | grep -q -x "$tgt_alias"; then
    _target_dir "$tgt_alias" > /dev/null

    if [ "$target_dir" ]; then
      if [ ! -h "$target_dir" ]; then
        echo "error: alias name \"$tgt_alias\" maps to a real file or directory. Cannot continue."
        exit 1
      fi

      old_target_dir="$(realpath "$target_dir")"
      old_target="$(basename "$old_target_dir")"
      echo " Old target: $old_target"
      _delete="Delete alias \"$tgt_alias\""
    fi
  fi

  # find list of matching targets
  tgts="$(_match_visible_targets $tgt_alias)"
  echo ""
  # if no matching targets - then list all targets
  [ "$tgts" ] || tgts="$_visible_targets"
  if [ ! "$tgts" ]; then
    echo "error: No targets to select from."
    exit 1
  fi

  tgts="$(echo "$tgts" | grep -v -x -F "$tgt_alias")"

  echo "Select target for alias \"$tgt_alias\":"
  echo ""
  if [ "$_delete" ]; then
    select new_tgt in $tgts "$_delete" CANCEL; do
      _in_select
      break
    done
  else
    select new_tgt in $tgts CANCEL; do
      _in_select
      break
    done
  fi
}

_check_apt_depends ()
{
  tgt="$1"
  codename="$(_lookup_codename "$tgt")"
  apt_depends="$(eval "echo \$apt_depends_${codename}")"
  # echo "target: $tgt"
  # echo "apt_depends=$apt_depends"
  [ "$apt_depends" ] || return 0
  installed_pkgs=$(dpkg --get-selections | grep -e '.*[[:space:]]*install$' | sed -e 's/[[:space:]].*//g')
  missing_pkgs=$(echo "$apt_depends" | sed -e 's/\s\+/\n/g' | grep -v -x -F "$installed_pkgs")

  if [ "$missing_pkgs" ]; then
    echo "Target: $tgt"
    echo "error: Dependancies for target \"$tgt\" are not met. Missing packages: $missing_pkgs"
    echo ""
    all_missing_pkgs="$all_missing_pkgs $missing_pkgs"
    _apt_depends_error=true
    return 1
  else
    return 0
  fi
}

_list_targets ()
{
  strs="$*"
  if [ "$strs" ]; then
    for str in $strs;do
      echo "targets matching: \"$str\""
      echo "$_visible_targets" | grep "$str"
    done
  else
    echo targets:
    echo "$_visible_targets" | grep -v -e '^[[:space:]]*$'
  fi
}

_set_unset_dot_a_vars ()
{
  if [ "$a" = "$_drb_platform_generic" ]; then
    unset _a dot_a edot_a
  else
    _a="_${a}"
    dot_a=".${a}"
    edot_a="\.${a}"
  fi

  retval=0
}

_configure_target ()
{
  local tgt="$1"
  local plats="$2"
  local conf_found

  # part 1
  _ensure_plats_push_codename;

  local p
  for p in $plats; do
    _set_unset_p

    # part 2
    _real_target_for "$tgt" "$p" > /dev/null
    tgt="$real_target"

    _target_dir_for "$tgt" "$p" > /dev/null
    [ "$target_dir" ] || continue

    as="$_drb_platform_generic"
    [ "$p" != "$_drb_platform_generic" ] && as="$as $p"

    for a in $as; do
      local codename
      _set_unset_dot_a_vars;

      user_conf_file="${drb_conf_root}/config/${tgt}${dot_a}.config"
      echo "$configured_conf_files" | grep -q -x "$user_conf_file" && continue

      if [ ! -e "$user_conf_file" ]; then
        unset conf_found
        tgt_conf_file="$(find "$target_dir" -type f -regex ".*/config${dot_a}.*" | head -1)"
        if [ "$tgt_conf_file" ]; then
          cp "$tgt_conf_file" "$user_conf_file"
          conf_found=true
          configured_conf_files="$configured_conf_files
$user_conf_file"

          if [ "$drb_editor" ]; then
            echo "opening \"$user_conf_file\""
            $drb_editor "$user_conf_file"
          fi
        fi
      fi
    done
  done

  if [ ! "$conf_found" ]; then
    echo "no config found for target \"$tgt\". skipping configuration."
  fi
}

_target_info ()
{
  unset $vars $funcs $_drb_api_vars $_drb_api_cmds
  tgt="$1"
  tgt="$(_soft_expand_target "$tgt")"
  _lookup_platforms "$tgt" > /dev/null
# _lookup_platforms "$tgt"

  echo
  printf "target: \"$tgt\"\n"

  _target_dir "$tgt" > /dev/null
    _real_target "$tgt" > /dev/null

  # [ -h "$target_dir" ] && printf "alias: true\n"
  [ -h "$target_dir" ] && printf "alias: true \"$tgt\" ---> $real_target\n"
  echo

  echo "platforms: $platforms"

  # for p in $platforms $_drb_platform_generic; do
  for p in $platforms; do
    _real_target_for "$tgt" "$p" > /dev/null
    tgt="$real_target"
    _target_dir_for "$tgt" "$p" > /dev/null

    codename="$(_lookup_codename_for "$tgt" "$p")"
# echo "tgt: $tgt"
# echo "codename: $codename"

    # ! reverse load vars inner
    if [ "$p" = "$_drb_platform_generic" ]; then
      unset p _p p_
    else
      _p="_${p}"
      p_="${p}_"
    fi

    if [ ! "$p" ]; then
      up="${plats#$_drb_platform_generic}"
      [ "$up" ] && printf "%15s\n" "platforms: $up"
    else
      printf "%15s\n" "for platform: $p"
    fi

    printf "       path: $target_dir\n"

    if echo "$tgt" | grep -q "$_visible_targets"; then
      printf "%18s\n" "hidden: false"
    else
      printf "%18s\n" "hidden: true"
    fi

    echo
    printf "  functions:\n"
    for api_func in $_drb_api_cmds_expanded $funcs; do
      func="$(eval "command -v \"${api_func}_${codename}${_p}\"")"
      [ "$func" ] && printf "%19s\n" "${func%_${codename}${_p}}"
      # [ "$func" ] && declare -f "$func"
    done

    echo
    printf "       vars:\n"
    for var in $_drb_api_vars $vars; do
      printf "%19s" "$var"
      var="$(eval "echo \"${var}_${codename}${_p}\"")"
      val="$(eval "echo \"\$${var}\"")"
      [ "$val" ] && printf " = $val" || printf " = n/a"
      printf "\n"
    done
    echo
  done
}

_drb_remove_build_stamps ()
{
  build_stamps="$*"
  # delete stages matching pattern
  for such_cmd in $build_stamps; do
    if ! rm -f "${drb_builder_root}/.completed/"*"${s_}${such_cmd}${_a}.${tgt}${_p}"; then
      echo "error: failed to remove build stamps for target: \"$tgt\""
      return 1
    fi
  done
}

_drb_clean_build_dirs ()
{
  build_dirs="$*"
  for path in $build_dirs; do
    pdc_var="$(eval "echo \"\$${path}_root${_a}_${codename}${_p}\"")"
    [ "$pdc_var" ] || eval "pdc_var=\"\${drb_${path}_root}/${tgt}${_p}\""
    if ! rm -Rf "$pdc_var"; then
      echo "error: failed to remove \"$pdc_var\""
      return 1
    fi
  done
}

_clean_target ()
{
  local tgt="$1"
  local plats="$2"

  # part 1
  _ensure_plats_push_codename;

  local s
  for s in $_drb_clean_stages; do
    _set_unset_s

    local p
    for p in $plats; do
      _set_unset_p

      as="$_drb_platform_generic"
      [ "$p" != "$_drb_platform_generic" ] && as="$as $p"

      for a in $as; do
        local codename
        _set_unset_a_vars;

        # part 3
        if [ "$s" = "$_drb_clean_stage" ]; then
          _drb_clean_build_dirs "build out"
          retval="$?"

        elif [ "$s" = "$_drb_clean_complete_stage" ]; then
          _drb_remove_build_stamps "build assemble";
          retval="$?"

        elif [ "$(eval "command -v \"${s_}clean${_a}_${codename}${_p}\"")" ]; then
          eval "${s_}clean${_a}_${codename}${_p}";
          retval="$?"
        fi

        if [ $retval -ne 0 ]; then
          echo "error: failed to clean target \"$tgt\""
          exit "$retval"
        fi
      done
    done
  done
}

_distclean_target ()
{
  _clean_target "$@"

  local tgt="$1"
  local plats="$2"

  # part 1
  _ensure_plats_push_codename;

  local s
  for s in $_drb_distclean_stages; do
    _set_unset_s

    local p
    for p in $plats; do
      _set_unset_p

      as="$_drb_platform_generic"
      [ "$p" != "$_drb_platform_generic" ] && as="$as $p"

      for a in $as; do
        local codename
        _set_unset_a_vars;

        # part 3
        if [ "$s" = "$_drb_distclean_stage" ]; then
          _drb_clean_build_dirs "src"
          retval="$?"

        elif [ "$s" = "$_drb_distclean_complete_stage" ]; then
          _drb_remove_build_stamps "fetch sync";
          retval="$?"

        elif [ "$(eval "command -v \"${s_}distclean${_a}_${codename}${_p}\"")" ]; then
          eval "${s_}distclean${_a}_${codename}${_p}";
          retval="$?"
        fi

        if [ $retval -ne 0 ]; then
          echo "error: failed to distclean target \"$tgt\""
          exit "$retval"
        fi
      done
    done
  done
}




